#!/bin/bash
#SBATCH --job-name=minimap_loop
#SBATCH --mail-type=BEGIN,END,FAIL
#SBATCH --mail-user=email@ufl.edu
#SBATCH --ntasks=1
#SBATCH --mem=100gb
#SBATCH --nodes=1
#SBATCH --cpus-per-task=10
#SBATCH --time=2-00:00:00
#SBATCH --output=minimap_loop_%j.log
#SBATCH --account=group
#SBATCH --qos=group-b

# Load necessary modules
module load minimap2 samtools

# Number of threads to use
THREADS=20

# Target sequence and directories
TARGET_SEQ="/path/to/plasmidbackboneseqs1.fa"
ASSEMBLY_DIR="/path/to/all_qc15_assemblies"
OUTPUT_DIR="/path/to/plasmidbackbonesearch"

# Ensure output directories exist
mkdir -p "$OUTPUT_DIR"

# Function to check if a step succeeded, but continue if a step fails
check_exit_status_continue() {
    if [ $? -ne 0 ]; then
        echo "Warning: $1 failed, but continuing."
    fi
}

# List of samples
samples=(
    "T69B" "T35merged" "T26merged" "T24merged" "T13-3merged"
    "T69A" "T57-25B" "T57-25A" 
    "T35-repeats_RT35C" "T35-repeats_RT35B" "T35-repeats_RT35A" 
    "T35HMW" "T35B" "T35A" "T26B" "T26A" 
    "T24B" "T24A" "T13-3B" "T13-3A" 
    "T57-25merged" "T69merged"
)

# Loop through each sample and run minimap2
for sample in "${samples[@]}"; do
    echo "Processing $sample..."

    # Define input and output files
    ASSEMBLY="$ASSEMBLY_DIR/${sample}_assembly/assembly.fasta"
    MAPPED_BAM="$OUTPUT_DIR/mapped_${sample}.bam"
    FINAL_SAM="$OUTPUT_DIR/mapped_${sample}.sam"
    CONTIGS_FASTA="$OUTPUT_DIR/contigs_mapped_${sample}.fasta"
    MINIMAP_FLAG="$OUTPUT_DIR/${sample}_minimap_completed.flag"
    SUMMARY_TSV="$OUTPUT_DIR/mapping_summary_${sample}.tsv"

    # Run minimap2 if not already done
    if [ ! -f "$MINIMAP_FLAG" ]; then
        minimap2 -ax map-ont -t $THREADS "$ASSEMBLY" "$TARGET_SEQ" | samtools view -Sb -F 4 -@ $THREADS - > "$MAPPED_BAM"
        check_exit_status_continue "minimap2 for $sample"
        
        # Convert BAM back to SAM using multiple threads
        samtools view -h -@ $THREADS "$MAPPED_BAM" > "$FINAL_SAM"
        check_exit_status_continue "samtools view for $sample"
        
        # Generate mapping summary: target query, mapped contig, sample, MAPQ
        samtools view "$MAPPED_BAM" | awk -v sample="$sample" '{print $1 "\t" $3 "\t" sample "\t" $5}' > "$SUMMARY_TSV"
        check_exit_status_continue "generate mapping summary table for $sample"

        # Extract contig names that mapped
        samtools view "$MAPPED_BAM" | grep -v '^@' | cut -f 3 | sort | uniq > "$OUTPUT_DIR/${sample}_contig_names.txt"
        check_exit_status_continue "Extract contig names for $sample"

        # Extract full sequences of mapped contigs
        xargs samtools faidx "$ASSEMBLY" < "$OUTPUT_DIR/${sample}_contig_names.txt" > "$CONTIGS_FASTA"
        check_exit_status_continue "samtools faidx for $sample"

        # Create a minimap completion flag
        touch "$MINIMAP_FLAG"
        echo "$sample minimap processing complete."
    else
        echo "$sample minimap already processed. Skipping minimap step."
    fi
done

# Combine all per-sample summary tables into one final table
echo -e "Query\tContig\tSample\tMAPQ" > "$OUTPUT_DIR/mapping_summary_all_samples.tsv"
cat "$OUTPUT_DIR"/mapping_summary_*.tsv >> "$OUTPUT_DIR/mapping_summary_all_samples.tsv"
echo "Final combined mapping summary saved to mapping_summary_all_samples.tsv"

echo "All samples processed."
